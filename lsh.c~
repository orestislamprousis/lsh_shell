/* 
 * Main source code file for lsh shell program
 *
 * You are free to add functions to this file.
 * If you want to add functions in a separate file 
 * you will need to modify Makefile to compile
 * your additional functions.
 *
 * Add appropriate comments in your code to make it
 * easier for us while grading your assignment.
 *
 * Submit the entire lab1 folder as a tar archive (.tgz).
 * Command to create submission archive: 
      $> tar cvf lab1.tgz lab1/
 *
 * All the best 
 */


#include <stdio.h>
#include <stdlib.h>
#include <readline/readline.h>
#include <readline/history.h>
#include "parse.h"
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>

/*
 * Function declarations
 */

void PrintCommand(int, Command *);
void PrintPgm(Pgm *);
void stripwhite(char *);
void signalhandler(int);
void recursion(Pgm*);

/* When non-zero, this global means the user is done using this program. */
int done = 0;
int fd1;
int fd2;
pid_t pid;


/*
 * Name: main
 *
 * Description: Gets the ball rolling...
 *
 */
int main(void)
{
  Command cmd;
  //Pgm *pgm;
  
  
  int n;
  
  //signal(SIGCHLD,SIG_IGN);
  signal(SIGINT,signalhandler);
  
  

  while (!done) {

    char *line;
    line = readline("> ");

    if (!line) 
    {
      /* Encountered EOF at top level */
      done = 1;
    }
    else 
    {
      /*
       * Remove leading and trailing whitespace from the line
       * Then, if there is anything left, add it to the history list
       * and execute it.
       */
      stripwhite(line);

      if(*line) 
      {
        add_history(line);
        /* execute it */
        n = parse(line, &cmd);
        //PrintCommand(n, &cmd);
        
       
        char *cd_exit = *cmd.pgm->pgmlist;
        stripwhite(cd_exit);
        
        if( strcmp("exit", cd_exit) == 0){ // Exit command
               //printf("Exit command\n");
               //kill(getpid(), SIGKILL );
               done = 1;
        }
        else if(  strcmp("cd", cd_exit) == 0){ // cd command
            char cwd[256] ;
            
            if( *(cmd.pgm->pgmlist + 1) != NULL){
                getcwd(cwd,sizeof(cwd));
            	strcat(cwd,"/"); 
            	strcat(cwd,*(cmd.pgm->pgmlist + 1));
            	
       			
		    }
		    else{
		        //printf("Home\n");
		        strcpy(cwd, getenv("HOME"));
		    }
		    
		    if(	chdir( cwd) == 0){ // change dir, give the next pointer in pl2 as argument
		      	//printf("cd changed to %s\n", cwd);
		    }else{
		       	fprintf(stderr, "cd error %s", cwd);
		    }
        }
        else{
            if ((pid = fork()) < 0 )
            {
              perror("Fork failed:\n");
              exit(1);
            }  
            else if (pid == 0) 
            {   //child process
                
                //if( cmd.bakground == 0){
                //    signal( SIGINT, SIG_DFL);
                    
                //}
                //else{
                    signal( SIGINT, SIG_IGN);
                    
                //}
                    
               if (cmd.rstdout != NULL )
                 {
                  
                  fd1 = open(cmd.rstdout,O_CREAT|O_WRONLY,0600);
              
                  if ( fd1 == -1 )
                       perror("Cannot open file:\n");
                  
                  //printf ("got in file \n");
              
                  dup2(fd1,STDOUT_FILENO);
                  close(fd1);
                 } 
               if ( cmd.rstdin != NULL )
               {
                  fd2 = open(cmd.rstdin,O_RDONLY );
                  if ( fd2 == -1 )
                  {
                    perror("Cannot read from file\n");
                  }
                   //printf ("got in file2 \n");
                   dup2(fd2,STDIN_FILENO);
                   close(fd2);
               }
                   
              
               
                    recursion(cmd.pgm);
              
             
                                                   
            }  
            else 
            { //parent process
              signal(SIGCHLD,signalhandler);
              if (cmd.bakground == 0)
              { int status; 
                wait(NULL);
                 //printf("Child complete \n");
                 
              }
              pid = 0;
              
              
                 
            }
        }
      }
              
    }
    
    
    if(line) 
    {
      free(line);
    }
  }
  return 0;
}

/*
 *Name:recursion
 *Description:forking and piping in order to communicate
*/


void recursion(Pgm *pgm)
{

  if (pgm->next == NULL)
  {
                         
    if ((execvp(*pgm->pgmlist,pgm->pgmlist)) == -1) {
              perror("Execvp error in recursion:\n");
              exit(EXIT_FAILURE);   
       }
  } 
  else
  {
      pid_t pid;
      int fd[2];
      
      printf("test");
      
      if (pipe(fd) == -1)
      {
        perror ("Pipe failure:\n");
        exit(1);
      }
      if ( (pid=fork()) < 0) 
      {
        perror ("Fork failure in recursion:\n");
        exit(1);
      }
      else if (pid == 0) 
      {                     /* ls child process*/
         signal( SIGINT, SIG_IGN);
              
         dup2(fd[1], STDOUT_FILENO);     /* make stdout same as pfds[1] */
         close(fd[0]);  /* we don't need this */     
         close(fd[1]);  /* we don't need this */     
         recursion(pgm->next);        
         //close(1);        /* close normal stdout */
       
       
        
      } 
      else  {                     /*  wc parent process*/
        //signal( SIGCHLD, SIG_IGN);
       dup2(fd[0], STDIN_FILENO);      /* make stdin same as pfds[0] */
       close(fd[1]);   /* we don't need this */ 
       close(fd[0]);   /* we don't need this */ 
       //waitpid(pid, NULL, 0);  
       
    if ((execvp(*pgm->pgmlist,pgm->pgmlist)) == -1) {
              perror("Execvp error in recursion:\n");
              exit(EXIT_FAILURE);   
       }
      }  
      
  }
  
}
 

/*Name:signalhandler
 *
 *Description:Handles a signal when something occurs
*/ 
  
  void signalhandler(int signal){
     if( signal == SIGCHLD){
        int status;
        //printf("Received signal from handlker\n");
        int pid2 = waitpid(-1, &status, WNOHANG);   
         
    }
    if (signal == SIGINT)
    {
      if (pid) {
        kill(pid, SIGKILL );
        printf("pid:%d\n", pid);
      }  
      else
        printf("\n");
    }   
    
  }

/*
 * Name: PrintCommand
 *
 * Description: Prints a Command structure as returned by parse on stdout.
 *
 */
void
PrintCommand (int n, Command *cmd)
{
  printf("Parse returned %d:\n", n);
  printf("   stdin : %s\n", cmd->rstdin  ? cmd->rstdin  : "<none>" );
  printf("   stdout: %s\n", cmd->rstdout ? cmd->rstdout : "<none>" );
  printf("   bg    : %s\n", cmd->bakground ? "yes" : "no");
  PrintPgm(cmd->pgm);
}

/*
 * Name: PrintPgm
 *
 * Description: Prints a list of Pgm:s
 *
 */
void
PrintPgm (Pgm *p)
{
  if (p == NULL) {
    return;
  }
  else {
    char **pl = p->pgmlist;

    /* The list is in reversed order so print
     * it reversed to get right
     */
    PrintPgm(p->next);
    printf("    [");
    while (*pl) {
      printf("%s ", *pl++);
    }
    printf("]\n");
  }
}

/*
 * Name: stripwhite
 *
 * Description: Strip whitespace from the start and end of STRING.
 */
void
stripwhite (char *string)
{
  register int i = 0;

  while (whitespace( string[i] )) {
    i++;
  }
  
  if (i) {
    strcpy (string, string + i);
  }

  i = strlen( string ) - 1;
  while (i> 0 && whitespace (string[i])) {
    i--;
  }

  string [++i] = '\0';
}
